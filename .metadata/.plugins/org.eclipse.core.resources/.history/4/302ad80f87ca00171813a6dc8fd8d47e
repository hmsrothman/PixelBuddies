import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_DEPTH_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.glClear;
import static org.lwjgl.opengl.GL11.glClearDepth;
import static org.lwjgl.opengl.GL13.GL_TEXTURE0;
import static org.lwjgl.opengl.GL13.glActiveTexture;
import static org.lwjgl.opengl.GL20.glUniform1i;
import static org.lwjgl.opengl.GL20.glUniformMatrix4fv;

import java.nio.FloatBuffer;

import org.lwjgl.BufferUtils;

import vector.Matrix4f;
import vector.Vector4f;

public class Game extends MainGame {
	Texture tracy1;
	Texture tracy2;
	Texture tracy3;
	Texture tracy4;

	SpriteBatch batch;
	GLSLProgram shader;
	
	Camera2D camera;
	
	int i=0;
	int j=0;
	
	@Override
	protected void onInit() {
		tracy1 = new Texture("C:\\Users\\Simon\\Code\\Java\\Game\\Tracy\\TEC Walk Cycle\\Walk 1 transparent.bmp");
		tracy2 = new Texture("C:\\Users\\Simon\\Code\\Java\\Game\\Tracy\\TEC Walk Cycle\\Walk 2 transparent.bmp");
		tracy3 = new Texture("C:\\Users\\Simon\\Code\\Java\\Game\\Tracy\\TEC Walk Cycle\\Walk 3 transparent.bmp");
		tracy4 = new Texture("C:\\Users\\Simon\\Code\\Java\\Game\\Tracy\\TEC Walk Cycle\\Walk 1 transparent.bmp");

		batch = new SpriteBatch();
		batch.init();
		
		camera = new Camera2D(1080, 1920);
		camera.update();
		
		shader.use();
		int loc = shader.getUniformLocation("cameraMat");
		FloatBuffer mat = BufferUtils.createFloatBuffer(16);
		Matrix4f matrix = new Matrix4f();
		Matrix4f.setIdentity(matrix).store(mat);
		glUniformMatrix4fv(loc, false, mat);
		System.out.println(mat.get(1));
	}

	@Override
	protected void initShaders() {
		shader = new GLSLProgram("C:\\Users\\Simon\\Code\\Java\\Game\\src\\shaders\\simple.vert",
				"C:\\Users\\Simon\\Code\\Java\\Game\\src\\shaders\\simple.frag");
	}

	@Override
	protected void update() {
		if(camera.update()){
			shader.use();
			int loc = shader.getUniformLocation("cameraMat");
			FloatBuffer mat = BufferUtils.createFloatBuffer(16);
			camera.getMatrix().store(mat);
			glUniformMatrix4fv(loc, true, mat);
		}
		shader.use();
		int loc = shader.getUniformLocation("cameraMat");
		FloatBuffer mat = BufferUtils.createFloatBuffer(16);
		Matrix4f matrix = new Matrix4f();
		Matrix4f.setIdentity(matrix).store(mat);
		glUniformMatrix4fv(loc, false, mat);
		System.out.println(mat.get(0));
	}

	@Override
	protected void draw() {
		
		glClearDepth(1.0);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		
		glActiveTexture(GL_TEXTURE0);
		
		int textureLocation = shader.getUniformLocation("sampler");
		glUniform1i(textureLocation, 0);
		
		shader.use();
		batch.begin();
		
		float scale = 1f;
		
		for(float x = -1; x<1;x+=1080/1920f * tracy1.width / (float)tracy1.height * scale){
			for(float y = -1; y<1; y+=1*scale){
				Vector4f destRect = new Vector4f(x,y,1080/1920f * tracy1.width / (float)tracy1.height*scale,1*scale);
				Vector4f uvRect = new Vector4f(0,0,1,1);
				int texture = 0;
				if(i%2==0){
					texture = tracy1.id;
				} else if(i%4==1){
					texture = tracy2.id;
				} else if(i%4==3){
					texture = tracy3.id;
				}
				float depth = 0;
				Vector4f color = new Vector4f(1,1,1,1);
				batch.draw(destRect, uvRect, texture, depth, color);
			}
		}
		batch.end();
		batch.renderBatch();
		shader.unuse();
		if(j++==12){
			i++;
			j=0;
		}
		if(i==4){
			i=0;
		}
	}
}
