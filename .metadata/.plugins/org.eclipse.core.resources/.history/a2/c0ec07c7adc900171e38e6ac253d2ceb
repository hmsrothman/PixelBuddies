import vector.Matrix4f;
import vector.Vector2f;
import vector.Vector3f;

public class Camera2D {
	int screenWidth, screenHeight;
	boolean needsUpdate;
	float scale;
	Vector2f pos;
	Matrix4f cameraMat;
	Matrix4f orthoMat;
	
	public Camera2D(int screenWidth, int screenHeight){
		init(screenWidth, screenHeight);
		pos = new Vector2f(0,0);
		scale = 1;
		cameraMat = new Matrix4f();
		needsUpdate = true;
		screenWidth = 0;
		screenHeight = 0;
		orthoMat= new Matrix4f();
	}
	
	private void init(int screenWidth, int screenHeight){
		this.screenWidth = screenWidth;
		this.screenHeight = screenHeight;
		orthoMat = MathUtil.toOrtho2D(orthoMat, 0.0f, (float) screenWidth, 0.0f,
				(float) screenHeight);
	}
	
	public void update(){
		if (needsMatrixUpdate) {
			Vector3f translate = new Vector3f(-pos.x, -pos.y, 0);

			Vector3f scale = new Vector3f(this.scale, this.scale, 0);
			
			orthoMat = MathUtil.toOrtho2D(null,(float) (-screenWidth / 2.0 * scale.x),
					(float) (screenWidth / 2.0 * scale.x),
					(float) (-screenHeight / 2.0 * scale.y),
					(float) (screenHeight / 2.0 * scale.y));
			_cameraMatrix = glm::translate(_orthoMatrix, translate); //TRANSLATE

			_needsMatrixUpdate = false;
		}
	}
	
	public void setPosition(Vector2f position){
		pos = position;
		needsUpdate = true;
	}
	
	public void setScale(float scale){
		this.scale = scale;
		needsUpdate = true;
	}
	
	Vector2f getPosition(){
		return pos;
	}
	
	float getScale(){
		return scale;
	}
	
	Matrix4f getMatrix(){
		return cameraMat;
	}
}
